stages:
  - check
  - deploy

variables:
  PYTHON_VERSION: "3.11"
  UV_LINK_MODE: copy
  UV_CACHE_DIR: .uv-cache

lint:
  stage: check
  image: ghcr.io/astral-sh/uv:python$PYTHON_VERSION-alpine
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR
    - key:
        files:
          - pyproject.toml
      paths:
        - .ruff_cache
        - .venv
  script:
    - uv venv
    - source .venv/bin/activate
    - uv sync --frozen --only-group lint
    - ruff check .
    - uv cache prune --ci
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

type-check:
  stage: check
  image: ghcr.io/astral-sh/uv:python$PYTHON_VERSION-alpine
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR
    - key:
        files:
          - pyproject.toml
      paths:
        - .mypy_cache
        - .venv
  script:
    - uv venv
    - source .venv/bin/activate
    - uv sync --frozen --only-group type-check
    - mypy .
    - uv cache prune --ci
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

tests:
  stage: check
  image: ghcr.io/astral-sh/uv:python$PYTHON_VERSION-alpine
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR
    - key:
        files:
          - pyproject.toml
      paths:
        - .pytest_cache
        - .venv
  script:
    - uv venv
    - source .venv/bin/activate
    - uv sync --frozen --only-group test
    - pytest
    - uv cache prune --ci
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

deploy_to_production:
  stage: deploy
  only:
    - main  # запускается только при пуше в main
  script:
    # Настройка SSH
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - ssh-keyscan 213.226.124.50 >> ~/.ssh/known_hosts

    # Копирование проекта на сервер
    - rsync -az --delete ./ root@213.226.124.50:/opt/myapp/

    # Выполнение docker-compose на сервере
    - ssh root@213.226.124.50 '
        cd ~/application &&
        docker-compose pull &&
        docker-compose up -d --remove-orphans
      '
  environment:
    name: production