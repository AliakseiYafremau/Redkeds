stages:
  - check
  - deploy

image: alpine:latest

variables:
  PYTHON_VERSION: "3.11"
  UV_LINK_MODE: copy
  UV_CACHE_DIR: .uv-cache

deploy_prod:
  stage: deploy
  image: alpine:3.20
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  before_script:
    - apk add --no-cache openssh-client git
    - eval "$(ssh-agent -s)"
    - ssh-add "$SSH_PRIVATE_KEY"
    - mkdir -p ~/.ssh && cp "$SSH_KNOWN_HOSTS" ~/.ssh/known_hosts
  script:
    - >
      ssh -o StrictHostKeyChecking=yes "$DEPLOY_PATH" '
        set -e
        cd application/backend
        git reset --hard
        git fetch --prune
        git switch main
        git pull --ff-only origin main
        docker compose -f docker-compose.yml up -d --build
      '
  

lint:
  stage: check
  image: ghcr.io/astral-sh/uv:python$PYTHON_VERSION-alpine
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR
    - key:
        files:
          - pyproject.toml
      paths:
        - .ruff_cache
        - .venv
  script:
    - uv venv
    - source .venv/bin/activate
    - uv sync --frozen --only-group lint
    - ruff check .
    - uv cache prune --ci
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

type-check:
  stage: check
  image: ghcr.io/astral-sh/uv:python$PYTHON_VERSION-alpine
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR
    - key:
        files:
          - pyproject.toml
      paths:
        - .mypy_cache
        - .venv
  script:
    - uv venv
    - source .venv/bin/activate
    - uv sync --frozen --only-group type-check
    - mypy .
    - uv cache prune --ci
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

tests:
  stage: check
  image: ghcr.io/astral-sh/uv:python$PYTHON_VERSION-alpine
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR
    - key:
        files:
          - pyproject.toml
      paths:
        - .pytest_cache
        - .venv
  before_script:
    - uv venv
    - source .venv/bin/activate
    - uv sync --frozen --only-group test
  script:
    - pytest
    - uv cache prune --ci
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

tests:
  stage: check
  image: ghcr.io/astral-sh/uv:python$PYTHON_VERSION-alpine
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR
    - key:
        files:
          - pyproject.toml
      paths:
        - .mypy_cache
        - .venv
  script:
    - uv venv
    - source .venv/bin/activate
    - uv sync --frozen --only-group type-check
    - mypy .
    - uv cache prune --ci
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

coverage:
  stage: check
  image: ghcr.io/astral-sh/uv:python$PYTHON_VERSION-alpine
  cache:
    - key:
        files:
          - uv.lock
      paths:
        - $UV_CACHE_DIR
    - key:
        files:
          - pyproject.toml
      paths:
        - .pytest_cache
        - .venv
  before_script:
    - uv venv
    - source .venv/bin/activate
    - uv sync --frozen --only-group test
    - uv pip install -e .
  script:
    - coverage run --source=src -m pytest
    - coverage report
    - uv cache prune --ci
  coverage: '/^TOTAL.*\s+(\d+%)$/'
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'