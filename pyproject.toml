[project]
name = "app"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "Aliaksei Yafremau", email = "aleksey.yafremau@gmail.com" }
]
requires-python = ">=3.11"
dependencies = [
    "alembic>=1.16.2",
    "dishka>=1.6.0",
    "fastapi>=0.115.13",
    "sqlalchemy>=2.0.41",
]

[project.scripts]
run = "app.main:run"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
test = [
    "pytest-asyncio>=1.0.0",
]
lint = [
    "ruff>=0.11.13",
]
type-check = [
    "dishka>=1.6.0",
    "fastapi>=0.115.13",
    "mypy>=1.16.1",
    "sqlalchemy>=2.0.41",
    "uvicorn>=0.34.3",
]


[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.mypy]
exclude = [
	# Игнорировать папку "tests" и все её подпапки
	"^tests/",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D100", # Не нужно писать docstring для модулей
    "D104", # Не нужно писать docstring для пакетов
    "D107", # Не нужно писать docstring для __init__()
    "D213", # Не нужно начинать docstring с второй строки
    "D203", # Не нужно писать docstring с первой строки
    "S101", # Возможность использования assert
    "EM101", # Возможность использования строки при вызове ошибки
    "EM102", # Возможность использования f-строки при вызове ошибки
    "PLR2004", # Возможность использования "magic" значений
    "RUF001", # Игнорирование неоднозначных символов в строке
    "RUF002", # Игнорирование неоднозначных символов в docstring
    "RUF003", # Игнорирование неоднозначных символов в коментарии
    "COM812", # Не нужно писать запятую в конце списка
    "TRY003", # Возможность писать сообщение в ошибке
    "S106", # Возможность hardcode пароль для тестовых реализаций
    "B904", # Возможность вызова exception без 'from'
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D103"] # Для тестов необязательно прописывать docstrings 

[tool.alembic]
script_location = "%(here)s/src/app/adapters/migrations"

# шаблон для генерации имен файлов миграций
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# дополнительные пути для sys.path
prepend_sys_path = [
    "."
]

# спецификация местоположения версий (по умолчанию: <script_location>/versions)
version_locations = [
    "%(here)s/src/app/adapters/migrations/versions"
]

# кодировка вывода, используемая при записи файлов миграций из script.py.mako
output_encoding = "utf-8"

# установите 'true', чтобы запустить среду во время команды 'revision', независимо от автогенерации
# revision_environment = false

# установите 'true', чтобы разрешить файлы .pyc и .pyo без исходного файла .py быть обнаружены как миграции в директории versions/
# sourceless = false

# установите 'true', чтобы искать исходные файлы рекурсивно в каждой директории "version_locations"
# recursive_version_locations = false

# пример post_write_hooks (раскомментируйте, чтобы использовать)
# [[tool.alembic.post_write_hooks]]
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"

